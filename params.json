{"name":"Oc","tagline":"OpenComponents, a framework for developing and distributing html components","body":"![oc](https://raw.github.com/opentable/oc/master/logo.png)\r\n=============\r\n\r\nOpenComponents is a framework to develop and deploy robust and distributed html components.\r\n\r\nThe goal is to own a system that allows big corporations (that may involve hundreds of engineers on a number of projects) to have tools to facilitate code sharing, reduce dependencies, and easily approach new features and experiments.\r\n\r\n[![npm version](https://img.shields.io/npm/v/oc.svg)](https://npmjs.org/package/oc)\r\n[![node version](https://img.shields.io/node/v/oc.svg)](https://npmjs.org/package/oc)\r\n[![downloads](https://img.shields.io/npm/dm/oc.svg?label=downloads+from+npm)](https://npmjs.org/package/oc)\r\n[![Join the chat at https://gitter.im/opentable/oc](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/opentable/oc?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\r\n\r\n[![linux build](https://img.shields.io/travis/opentable/oc/master.svg?label=linux+build)](http://travis-ci.org/opentable/oc)\r\n[![windows build](https://img.shields.io/appveyor/ci/matteofigus/oc/master.svg?label=windows+build)](https://ci.appveyor.com/project/matteofigus/oc)\r\n\r\n[![Sauce Test Status](https://saucelabs.com/browser-matrix/matteofigus.svg)](https://saucelabs.com/u/matteofigus)\r\n\r\nDisclaimer: This project is still under heavy development and the API is likely to change at any time. In case you would find any issues, check the [troubleshooting page](CONTRIBUTING.md#troubleshooting).\r\n\r\n# Index\r\n1. [Introduction](#introduction)\r\n2. [Components](#components)\r\n  * [Creation](#creation)\r\n  * [Editing, debugging, testing](#editing-debugging-testing)\r\n  * [Publishing to a registry](#publishing-to-a-registry)\r\n3. [Consuming components](#consuming-components)\r\n  * [Client-side rendering](#client-side-rendering)\r\n  * [Server-side rendering](#server-side-rendering)\r\n4. [Install the cli](#install-the-cli)\r\n5. [Setup a library](#setup-a-library)\r\n6. [Setup a registry](#setup-a-registry)\r\n7. [Contacts](#contacts)\r\n\r\n# Introduction\r\nOpenComponents involves two parts:\r\n\r\n* The [`components`](#components) are small units of isomorphic code mainly consisting of html, javascript, css. They can optionally contain some logic, allowing a server-side node.js application to compose a model that is used to render the view. After rendering they are pieces of pure html to be injected in any html page.\r\n* The [`consumers`](#consuming-components) are websites or microsites ([small independently deployable web sites all connected by a front-door service or any routing mechanism](http://tech.opentable.co.uk/blog/2015/02/09/dismantling-the-monolith-microsites-at-opentable/)) that need components for rendering partial contents in their web pages.\r\n\r\nThe framework consists mainly of three parts.\r\n\r\n* The [`cli`](#install-the-cli) allows developers to create, develop, test, and publish components.\r\n* The [`library`](#setup-a-library) is where the components are stored after the publishing. When components depend on static resources (such as images, css files, etc.) these are stored, during packaging and publishing, in a publicly-exposed part of the library that serves as cdn.\r\n* The [`registry`](#setup-a-registry) is a rest api that is used to consume, retrieve, and publish components. Since they are immutable, the registry is the entity that handles the traffic between the library and the consumers.\r\n\r\n# Components\r\nA component is a directory composed by\r\n\r\n|File|Description|\r\n|--------------------|-------------|\r\n|`package.json`|The component definition, dependencies, and more.|\r\n|`view.html`|The view containing the markup. Currently we support `Handlebars` and `Jade`. It can contain some CSS under the `<style>` tag and client-side Javascript under the `<script>` tag.|\r\n|`server.js` (optional)|If the component has some logic, including consuming services, this is the entity that will produce the view-model to compile the view.|\r\n|static contents (optional)|Images, Javascript, and files that will be referenced in the HTML markup.|\r\n|*|Any other files that will be useful for the development such as tests, docs, etc.|\r\n\r\nAfter publishing, components are immutable and semantic versioned.\r\n\r\n[Getting started with components](docs/getting-started.md)\r\n\r\n[Advanced operations](docs/advanced-operations.md)\r\n\r\n## Creation\r\nTo create a folder containing the component:\r\n```sh\r\nnpm install oc -g\r\noc init hello-world\r\n```\r\n\r\n## Editing, debugging, testing\r\n\r\nTo start a local test registry using a components' folder as a library with a watcher:\r\n```sh\r\noc dev . 3030\r\n```\r\n\r\nTo see how the component looks like when consuming it:\r\n```sh\r\noc preview http://localhost:3030/hello-world\r\n```\r\n\r\nAs soon as you make changes on the component, you will be able to refresh this page and see how it looks.\r\n\r\n## Publishing to a registry\r\n\r\nYou will need an online registry connected to a library. A component with the same name and version cannot already exist on that registry.\r\n```sh\r\n# you have to do the registry config first, just once\r\noc registry add http://my-components-registry.mydomain.com\r\n\r\n# then, ship it\r\noc publish hello-world/\r\n```\r\n\r\nNow, it should be available at `http://my-components-registry.mydomain.com/hello-world`.\r\n\r\n# Consuming components\r\n\r\nFrom a consumer's perspective, a component is an HTML fragment. You can render components just on the client-side, just on the server-side, or use the client-side rendering as failover strategy for when the server-side rendering fails (for example because the registry is not responding quickly or is down).\r\n\r\nYou don't need node.js to consume components on the server-side. The registry can provide you rendered components so that you can consume them using any tech stack.\r\n\r\nWhen published, components are immutable and semantic versioned. The registry allows consumers to get any version of the component: the latest patch, or minor version, etc.\r\n\r\n## Client-side rendering\r\n\r\nTo make this happen, your components registry has to be publicly available.\r\nThis is all you need:\r\n```html\r\n<html>\r\n  <head></head>\r\n  <body>\r\n    <oc-component href=\"http://my-components-registry.mydomain.com/hello-world/1.X.X\"></oc-component>\r\n    <script src=\"http://my-components-registry.mydomain.com/oc-client/client.js\" />\r\n  </body>\r\n</html>\r\n```\r\n\r\nFor more information about client-side operations, look at [this page](docs/browser-client.md).\r\n\r\n## Server-side rendering\r\n\r\nYou can get rendered components via the registry rest api.\r\n```sh\r\ncurl http://my-components-registry.mydomain.com/hello-world\r\n\r\n{\r\n  \"href\": \"https://my-components-registry.mydomain.com/hello-world\",\r\n  \"version\": \"1.0.0\",\r\n  \"requestVersion\": \"\",\r\n  \"html\": \"<oc-component href=\\\"https://my-components-registry.mydomain.com/hello-world\\\" data-hash=\\\"cad2a9671257d5033d2abfd739b1660993021d02\\\" id=\\\"2890594349\\\" data-rendered=\\\"true\\\" data-version=\\\"1.0.13\\\">Hello John doe!</oc-component>\",\r\n  \"type\": \"oc-component\",\r\n  \"renderMode\": \"rendered\"\r\n}\r\n```\r\n\r\nNevertheless, for improving caching and response size, when using the `node.js` client or any language capable of executing server-side javascript the request will look more like:\r\n```sh\r\n curl http://my-components-registry.mydomain.com/hello-world/~1.0.0 -H Accept:application/vnd.oc.unrendered+json\r\n\r\n{\r\n  \"href\": \"https://my-components-registry.mydomain.com/hello-world/~1.0.0\",\r\n  \"version\": \"1.0.0\",\r\n  \"requestVersion\": \"~1.0.0\",\r\n  \"data\": {\r\n    \"name\": \"John doe\"\r\n  },\r\n  \"template\": {\r\n    \"src\": \"https://s3.amazonaws.com/your-s3-bucket/components/hello-world/1.0.0/template.js\",\r\n    \"type\": \"handlebars\",\r\n    \"key\": \"cad2a9671257d5033d2abfd739b1660993021d02\"\r\n  },\r\n  \"type\": \"oc-component\",\r\n  \"renderMode\": \"unrendered\"\r\n}\r\n```\r\n\r\nIn this case you get the compiled view + the data, and you can do the rendering, eventually, interpolating the view-model data and rendering the compiled view with it.\r\n\r\nWhen retrieving multiple components, a [batch POST endpoint](docs/registry-post-route.md) allows to make a single request to the API.\r\n\r\n* [Node.js library](client/README.md)\r\n* [Ruby library](https://github.com/opentable/ruby-oc)\r\n* [Rails plugin](https://github.com/opentable/opencomponents-rails)\r\n* [Sinatra plugin](https://github.com/opentable/sinatra-opencomponents)\r\n\r\n# Install the cli\r\n\r\n```sh\r\nnpm install oc -g\r\n# to see available commands:\r\noc\r\n```\r\n\r\n# Setup a library\r\n\r\nAt the moment the only supported library is Amazon S3. Create an account and get the API credentials; you will need them while setting up the registry.\r\n\r\n# Setup a registry\r\n\r\nThe registry is a node.js express app that serves the components. You can have multiple registries connected to a library, but you can't have multiple libraries connected to a registry.\r\nFirst, create a dir and install oc:\r\n```sh\r\nmkdir oc-registry && cd oc-registry\r\nnpm init\r\nnpm install oc --save\r\n```\r\n\r\nThen on the entry point, what you need on an `index.js` file is:\r\n\r\n```js\r\nvar oc = require('oc');\r\n\r\nvar configuration = {\r\n  verbosity: 0,\r\n  baseUrl: 'https://my-components-registry.mydomain.com/',\r\n  port: 3000,\r\n  tempDir: './temp/',\r\n  refreshInterval: 600,\r\n  pollingInterval: 5,\r\n  s3: {\r\n    key: 'your-s3-key',\r\n    secret: 'your-s3-secret',\r\n    bucket: 'your-s3-bucket',\r\n    region: 'your-s3-region',\r\n    path: '//s3.amazonaws.com/your-s3-bucket/',\r\n    componentsDir: 'components'\r\n  },\r\n  env: { name: 'production' }\r\n};\r\n\r\nvar registry = new oc.Registry(configuration);\r\n\r\nregistry.start(function(err, app){\r\n  if(err){\r\n    console.log('Registry not started: ', err);\r\n    process.exit(1);\r\n  }\r\n});\r\n```\r\n\r\nFor the registry configuration's documentation, [look at this page](docs/registry.md).\r\n\r\n# Contacts\r\n\r\nWe appreciate contributions, in terms of feedbacks, code, anything really. If you use OC in productions, please let us know (but there is no obligation on that as OC is MIT licensed).\r\n\r\n* [contributing guidelines](CONTRIBUTING.md)\r\n* [code of conduct](CONTRIBUTING.md#code-of-conduct)\r\n* [troubleshooting](CONTRIBUTING.md#troubleshooting)\r\n* [gitter chat](https://gitter.im/opentable/oc)\r\n* oc@opentable.com\r\n\r\nMaintainer:\r\n* [@matteofigus](https://github.com/matteofigus)\r\n\r\nContributors:\r\n* [@ajcw](https://github.com/ajcw)\r\n* [@andyroyle](https://github.com/andyroyle)\r\n* [@antwhite](https://github.com/antwhite)\r\n* [@char1e5](https://github.com/char1e5)\r\n* [@federicomaffei](https://github.com/federicomaffei)\r\n* [@jankowiakmaria](https://github.com/jankowiakmaria)\r\n* [@pbazydlo](https://github.com/pbazydlo)\r\n* [@stevejhiggs](https://github.com/stevejhiggs)\r\n* [@todd](https://github.com/todd)\r\n* [@tpgmartin](https://github.com/tpgmartin)\r\n\r\n# License\r\n\r\nMIT\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}